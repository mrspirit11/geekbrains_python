# Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv____truediv__()). Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого числа деления клеток, соответственно.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.

# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.

# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.

# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order() вернёт строку: *****\n*****\n**.

# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.

# Подсказка: подробный список операторов для перегрузки доступен по ссылке https://pythonworld.ru/osnovy/peregruzka-operatorov.html
from abc import ABC, abstractmethod


class CellType(ABC):
    cells: int
    @abstractmethod
    def __init__(self, cells: int) -> None: pass


class Cell(CellType):
    def __init__(self, cells: int) -> None:
        self.cells = cells

    def __add__(self, oth: CellType) -> CellType:
        return Cell(self.cells + oth.cells)

    def __sub__(self, oth: CellType) -> CellType:
        if self.cells > oth.cells:
            return Cell(self.cells - oth.cells)
        else:
            raise ArithmeticError('Cell1 < Cell 2')

    def __mul__(self, oth: CellType) -> CellType:
        return Cell(self.cells * oth.cells)

    def __floordiv__(self, oth: CellType) -> CellType:
        return Cell(self.cells // oth.cells)

    def make_order(self, cells_in_row):
        return ''.join(['*' if i % cells_in_row else '*\n' for i in range(1, self.cells + 1)])

    def __str__(self):
        return str(self.cells)

if __name__ == '__main__':
    c1 = Cell(15)
    c2 = Cell(10)
    print(c1+c2)
    print(c1-c2)
    print(c1*c2)
    print(c1//c2)
    print(c1.make_order(5))
