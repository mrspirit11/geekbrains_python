# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами. Класс-исключение должен контролировать типы данных элементов списка.

# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на экран.

# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться

class MyValueErr(TypeError):
    def __str__(self):
        return '\33[91mНе верный тип\33[0m'

class MyValue: 
    def __init__(self, inp):
        self.inp = inp

    @property
    def valid(self):
        try:
            if self.inp.isdigit():
                return int(self.inp)
            else:
                raise MyValueErr
        except MyValueErr as e:
            print(e)


l = []
while True:
    inp = input('Введите число или s для останоки\n')
    if inp == 's':
        break
    else:
        a = MyValue(inp).valid
        if a:
            l.append(a)
print(l)